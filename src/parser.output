Grammar

    0 $accept: program $end

    1 program: line
    2        | program line

    3 line: label operation end_of_line
    4     | label end_of_line
    5     | operation end_of_line
    6     | end_of_line

    7 end_of_line: EOL

    8 label: IDENTIFIER COLON

    9 operation: directive
   10          | instruction

   11 directive: GLOBAL symbol_list
   12          | EXTERN symbol_list
   13          | SECTION symbol
   14          | WORD symbol_literal_list
   15          | SKIP literal
   16          | END

   17 instruction: no_op_inst
   18            | jmp_inst
   19            | one_reg_inst
   20            | two_reg_inst
   21            | two_reg_jmp_inst
   22            | LD ld_data_operand
   23            | ST one_reg COMMA st_data_operand
   24            | CSRRD csr_reg COMMA one_reg
   25            | CSRWR one_reg COMMA csr_reg

   26 csr_reg: STATUS
   27        | HANDLER
   28        | CAUSE

   29 no_op_inst: HALT
   30           | INT
   31           | IRET
   32           | RET

   33 jmp_inst: CALL adress_operand
   34         | JMP adress_operand

   35 one_reg_inst: PUSH one_reg
   36             | POP one_reg
   37             | NOT one_reg

   38 two_reg_inst: XCHG two_regs
   39             | ADD two_regs
   40             | SUB two_regs
   41             | MUL two_regs
   42             | DIV two_regs
   43             | AND two_regs
   44             | OR two_regs
   45             | XOR two_regs
   46             | SHL two_regs
   47             | SHR two_regs

   48 one_reg: REG

   49 two_regs: one_reg COMMA REG

   50 two_reg_jmp_inst: BEQ two_regs COMMA adress_operand
   51                 | BNE two_regs COMMA adress_operand
   52                 | BGT two_regs COMMA adress_operand

   53 adress_operand: literal
   54               | symbol

   55 ld_data_operand: DOLLAR literal COMMA REG
   56                | DOLLAR symbol COMMA REG
   57                | literal COMMA REG
   58                | symbol COMMA REG
   59                | one_reg COMMA REG
   60                | LEFTBRACKET one_reg RIGHTBRACKET COMMA REG
   61                | LEFTBRACKET one_reg PLUS literal RIGHTBRACKET COMMA REG

   62 st_data_operand: literal
   63                | symbol
   64                | LEFTBRACKET REG RIGHTBRACKET
   65                | LEFTBRACKET REG PLUS literal RIGHTBRACKET

   66 literal: NUMBER

   67 symbol: IDENTIFIER

   68 symbol_list: symbol
   69            | symbol_list COMMA symbol

   70 symbol_literal_list: symbol
   71                    | literal
   72                    | symbol_literal_list COMMA symbol
   73                    | symbol_literal_list COMMA literal


Terminals, with rules where they appear

    $end (0) 0
    error (256)
    GLOBAL (258) 11
    EXTERN (259) 12
    SECTION (260) 13
    WORD (261) 14
    SKIP (262) 15
    END (263) 16
    HALT (264) 29
    INT (265) 30
    IRET (266) 31
    CALL (267) 33
    RET (268) 32
    JMP (269) 34
    BEQ (270) 50
    BNE (271) 51
    BGT (272) 52
    PUSH (273) 35
    POP (274) 36
    XCHG (275) 38
    ADD (276) 39
    SUB (277) 40
    MUL (278) 41
    DIV (279) 42
    NOT (280) 37
    AND (281) 43
    OR (282) 44
    XOR (283) 45
    SHL (284) 46
    SHR (285) 47
    LD (286) 22
    ST (287) 23
    CSRRD (288) 24
    CSRWR (289) 25
    REG (290) 48 49 55 56 57 58 59 60 61 64 65
    STATUS (291) 26
    HANDLER (292) 27
    CAUSE (293) 28
    DOLLAR (294) 55 56
    LEFTBRACKET (295) 60 61 64 65
    RIGHTBRACKET (296) 60 61 64 65
    PLUS (297) 61 65
    COMMA (298) 23 24 25 49 50 51 52 55 56 57 58 59 60 61 69 72 73
    COLON (299) 8
    EOL (300) 7
    NUMBER <num> (301) 66
    IDENTIFIER <ident> (302) 8 67


Nonterminals, with rules where they appear

    $accept (48)
        on left: 0
    program (49)
        on left: 1 2
        on right: 0 2
    line (50)
        on left: 3 4 5 6
        on right: 1 2
    end_of_line (51)
        on left: 7
        on right: 3 4 5 6
    label (52)
        on left: 8
        on right: 3 4
    operation (53)
        on left: 9 10
        on right: 3 5
    directive (54)
        on left: 11 12 13 14 15 16
        on right: 9
    instruction (55)
        on left: 17 18 19 20 21 22 23 24 25
        on right: 10
    csr_reg (56)
        on left: 26 27 28
        on right: 24 25
    no_op_inst (57)
        on left: 29 30 31 32
        on right: 17
    jmp_inst (58)
        on left: 33 34
        on right: 18
    one_reg_inst (59)
        on left: 35 36 37
        on right: 19
    two_reg_inst (60)
        on left: 38 39 40 41 42 43 44 45 46 47
        on right: 20
    one_reg (61)
        on left: 48
        on right: 23 24 25 35 36 37 49 59 60 61
    two_regs (62)
        on left: 49
        on right: 38 39 40 41 42 43 44 45 46 47 50 51 52
    two_reg_jmp_inst (63)
        on left: 50 51 52
        on right: 21
    adress_operand (64)
        on left: 53 54
        on right: 33 34 50 51 52
    ld_data_operand (65)
        on left: 55 56 57 58 59 60 61
        on right: 22
    st_data_operand (66)
        on left: 62 63 64 65
        on right: 23
    literal <num> (67)
        on left: 66
        on right: 15 53 55 57 61 62 65 71 73
    symbol <ident> (68)
        on left: 67
        on right: 13 54 56 58 63 68 69 70 72
    symbol_list (69)
        on left: 68 69
        on right: 11 12 69
    symbol_literal_list (70)
        on left: 70 71 72 73
        on right: 14 72 73


State 0

    0 $accept: . program $end

    GLOBAL      shift, and go to state 1
    EXTERN      shift, and go to state 2
    SECTION     shift, and go to state 3
    WORD        shift, and go to state 4
    SKIP        shift, and go to state 5
    END         shift, and go to state 6
    HALT        shift, and go to state 7
    INT         shift, and go to state 8
    IRET        shift, and go to state 9
    CALL        shift, and go to state 10
    RET         shift, and go to state 11
    JMP         shift, and go to state 12
    BEQ         shift, and go to state 13
    BNE         shift, and go to state 14
    BGT         shift, and go to state 15
    PUSH        shift, and go to state 16
    POP         shift, and go to state 17
    XCHG        shift, and go to state 18
    ADD         shift, and go to state 19
    SUB         shift, and go to state 20
    MUL         shift, and go to state 21
    DIV         shift, and go to state 22
    NOT         shift, and go to state 23
    AND         shift, and go to state 24
    OR          shift, and go to state 25
    XOR         shift, and go to state 26
    SHL         shift, and go to state 27
    SHR         shift, and go to state 28
    LD          shift, and go to state 29
    ST          shift, and go to state 30
    CSRRD       shift, and go to state 31
    CSRWR       shift, and go to state 32
    EOL         shift, and go to state 33
    IDENTIFIER  shift, and go to state 34

    program           go to state 35
    line              go to state 36
    end_of_line       go to state 37
    label             go to state 38
    operation         go to state 39
    directive         go to state 40
    instruction       go to state 41
    no_op_inst        go to state 42
    jmp_inst          go to state 43
    one_reg_inst      go to state 44
    two_reg_inst      go to state 45
    two_reg_jmp_inst  go to state 46


State 1

   11 directive: GLOBAL . symbol_list

    IDENTIFIER  shift, and go to state 47

    symbol       go to state 48
    symbol_list  go to state 49


State 2

   12 directive: EXTERN . symbol_list

    IDENTIFIER  shift, and go to state 47

    symbol       go to state 48
    symbol_list  go to state 50


State 3

   13 directive: SECTION . symbol

    IDENTIFIER  shift, and go to state 47

    symbol  go to state 51


State 4

   14 directive: WORD . symbol_literal_list

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    literal              go to state 53
    symbol               go to state 54
    symbol_literal_list  go to state 55


State 5

   15 directive: SKIP . literal

    NUMBER  shift, and go to state 52

    literal  go to state 56


State 6

   16 directive: END .

    $default  reduce using rule 16 (directive)


State 7

   29 no_op_inst: HALT .

    $default  reduce using rule 29 (no_op_inst)


State 8

   30 no_op_inst: INT .

    $default  reduce using rule 30 (no_op_inst)


State 9

   31 no_op_inst: IRET .

    $default  reduce using rule 31 (no_op_inst)


State 10

   33 jmp_inst: CALL . adress_operand

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    adress_operand  go to state 57
    literal         go to state 58
    symbol          go to state 59


State 11

   32 no_op_inst: RET .

    $default  reduce using rule 32 (no_op_inst)


State 12

   34 jmp_inst: JMP . adress_operand

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    adress_operand  go to state 60
    literal         go to state 58
    symbol          go to state 59


State 13

   50 two_reg_jmp_inst: BEQ . two_regs COMMA adress_operand

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 63


State 14

   51 two_reg_jmp_inst: BNE . two_regs COMMA adress_operand

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 64


State 15

   52 two_reg_jmp_inst: BGT . two_regs COMMA adress_operand

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 65


State 16

   35 one_reg_inst: PUSH . one_reg

    REG  shift, and go to state 61

    one_reg  go to state 66


State 17

   36 one_reg_inst: POP . one_reg

    REG  shift, and go to state 61

    one_reg  go to state 67


State 18

   38 two_reg_inst: XCHG . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 68


State 19

   39 two_reg_inst: ADD . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 69


State 20

   40 two_reg_inst: SUB . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 70


State 21

   41 two_reg_inst: MUL . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 71


State 22

   42 two_reg_inst: DIV . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 72


State 23

   37 one_reg_inst: NOT . one_reg

    REG  shift, and go to state 61

    one_reg  go to state 73


State 24

   43 two_reg_inst: AND . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 74


State 25

   44 two_reg_inst: OR . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 75


State 26

   45 two_reg_inst: XOR . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 76


State 27

   46 two_reg_inst: SHL . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 77


State 28

   47 two_reg_inst: SHR . two_regs

    REG  shift, and go to state 61

    one_reg   go to state 62
    two_regs  go to state 78


State 29

   22 instruction: LD . ld_data_operand

    REG          shift, and go to state 61
    DOLLAR       shift, and go to state 79
    LEFTBRACKET  shift, and go to state 80
    NUMBER       shift, and go to state 52
    IDENTIFIER   shift, and go to state 47

    one_reg          go to state 81
    ld_data_operand  go to state 82
    literal          go to state 83
    symbol           go to state 84


State 30

   23 instruction: ST . one_reg COMMA st_data_operand

    REG  shift, and go to state 61

    one_reg  go to state 85


State 31

   24 instruction: CSRRD . csr_reg COMMA one_reg

    STATUS   shift, and go to state 86
    HANDLER  shift, and go to state 87
    CAUSE    shift, and go to state 88

    csr_reg  go to state 89


State 32

   25 instruction: CSRWR . one_reg COMMA csr_reg

    REG  shift, and go to state 61

    one_reg  go to state 90


State 33

    7 end_of_line: EOL .

    $default  reduce using rule 7 (end_of_line)


State 34

    8 label: IDENTIFIER . COLON

    COLON  shift, and go to state 91


State 35

    0 $accept: program . $end
    2 program: program . line

    $end        shift, and go to state 92
    GLOBAL      shift, and go to state 1
    EXTERN      shift, and go to state 2
    SECTION     shift, and go to state 3
    WORD        shift, and go to state 4
    SKIP        shift, and go to state 5
    END         shift, and go to state 6
    HALT        shift, and go to state 7
    INT         shift, and go to state 8
    IRET        shift, and go to state 9
    CALL        shift, and go to state 10
    RET         shift, and go to state 11
    JMP         shift, and go to state 12
    BEQ         shift, and go to state 13
    BNE         shift, and go to state 14
    BGT         shift, and go to state 15
    PUSH        shift, and go to state 16
    POP         shift, and go to state 17
    XCHG        shift, and go to state 18
    ADD         shift, and go to state 19
    SUB         shift, and go to state 20
    MUL         shift, and go to state 21
    DIV         shift, and go to state 22
    NOT         shift, and go to state 23
    AND         shift, and go to state 24
    OR          shift, and go to state 25
    XOR         shift, and go to state 26
    SHL         shift, and go to state 27
    SHR         shift, and go to state 28
    LD          shift, and go to state 29
    ST          shift, and go to state 30
    CSRRD       shift, and go to state 31
    CSRWR       shift, and go to state 32
    EOL         shift, and go to state 33
    IDENTIFIER  shift, and go to state 34

    line              go to state 93
    end_of_line       go to state 37
    label             go to state 38
    operation         go to state 39
    directive         go to state 40
    instruction       go to state 41
    no_op_inst        go to state 42
    jmp_inst          go to state 43
    one_reg_inst      go to state 44
    two_reg_inst      go to state 45
    two_reg_jmp_inst  go to state 46


State 36

    1 program: line .

    $default  reduce using rule 1 (program)


State 37

    6 line: end_of_line .

    $default  reduce using rule 6 (line)


State 38

    3 line: label . operation end_of_line
    4     | label . end_of_line

    GLOBAL   shift, and go to state 1
    EXTERN   shift, and go to state 2
    SECTION  shift, and go to state 3
    WORD     shift, and go to state 4
    SKIP     shift, and go to state 5
    END      shift, and go to state 6
    HALT     shift, and go to state 7
    INT      shift, and go to state 8
    IRET     shift, and go to state 9
    CALL     shift, and go to state 10
    RET      shift, and go to state 11
    JMP      shift, and go to state 12
    BEQ      shift, and go to state 13
    BNE      shift, and go to state 14
    BGT      shift, and go to state 15
    PUSH     shift, and go to state 16
    POP      shift, and go to state 17
    XCHG     shift, and go to state 18
    ADD      shift, and go to state 19
    SUB      shift, and go to state 20
    MUL      shift, and go to state 21
    DIV      shift, and go to state 22
    NOT      shift, and go to state 23
    AND      shift, and go to state 24
    OR       shift, and go to state 25
    XOR      shift, and go to state 26
    SHL      shift, and go to state 27
    SHR      shift, and go to state 28
    LD       shift, and go to state 29
    ST       shift, and go to state 30
    CSRRD    shift, and go to state 31
    CSRWR    shift, and go to state 32
    EOL      shift, and go to state 33

    end_of_line       go to state 94
    operation         go to state 95
    directive         go to state 40
    instruction       go to state 41
    no_op_inst        go to state 42
    jmp_inst          go to state 43
    one_reg_inst      go to state 44
    two_reg_inst      go to state 45
    two_reg_jmp_inst  go to state 46


State 39

    5 line: operation . end_of_line

    EOL  shift, and go to state 33

    end_of_line  go to state 96


State 40

    9 operation: directive .

    $default  reduce using rule 9 (operation)


State 41

   10 operation: instruction .

    $default  reduce using rule 10 (operation)


State 42

   17 instruction: no_op_inst .

    $default  reduce using rule 17 (instruction)


State 43

   18 instruction: jmp_inst .

    $default  reduce using rule 18 (instruction)


State 44

   19 instruction: one_reg_inst .

    $default  reduce using rule 19 (instruction)


State 45

   20 instruction: two_reg_inst .

    $default  reduce using rule 20 (instruction)


State 46

   21 instruction: two_reg_jmp_inst .

    $default  reduce using rule 21 (instruction)


State 47

   67 symbol: IDENTIFIER .

    $default  reduce using rule 67 (symbol)


State 48

   68 symbol_list: symbol .

    $default  reduce using rule 68 (symbol_list)


State 49

   11 directive: GLOBAL symbol_list .
   69 symbol_list: symbol_list . COMMA symbol

    COMMA  shift, and go to state 97

    $default  reduce using rule 11 (directive)


State 50

   12 directive: EXTERN symbol_list .
   69 symbol_list: symbol_list . COMMA symbol

    COMMA  shift, and go to state 97

    $default  reduce using rule 12 (directive)


State 51

   13 directive: SECTION symbol .

    $default  reduce using rule 13 (directive)


State 52

   66 literal: NUMBER .

    $default  reduce using rule 66 (literal)


State 53

   71 symbol_literal_list: literal .

    $default  reduce using rule 71 (symbol_literal_list)


State 54

   70 symbol_literal_list: symbol .

    $default  reduce using rule 70 (symbol_literal_list)


State 55

   14 directive: WORD symbol_literal_list .
   72 symbol_literal_list: symbol_literal_list . COMMA symbol
   73                    | symbol_literal_list . COMMA literal

    COMMA  shift, and go to state 98

    $default  reduce using rule 14 (directive)


State 56

   15 directive: SKIP literal .

    $default  reduce using rule 15 (directive)


State 57

   33 jmp_inst: CALL adress_operand .

    $default  reduce using rule 33 (jmp_inst)


State 58

   53 adress_operand: literal .

    $default  reduce using rule 53 (adress_operand)


State 59

   54 adress_operand: symbol .

    $default  reduce using rule 54 (adress_operand)


State 60

   34 jmp_inst: JMP adress_operand .

    $default  reduce using rule 34 (jmp_inst)


State 61

   48 one_reg: REG .

    $default  reduce using rule 48 (one_reg)


State 62

   49 two_regs: one_reg . COMMA REG

    COMMA  shift, and go to state 99


State 63

   50 two_reg_jmp_inst: BEQ two_regs . COMMA adress_operand

    COMMA  shift, and go to state 100


State 64

   51 two_reg_jmp_inst: BNE two_regs . COMMA adress_operand

    COMMA  shift, and go to state 101


State 65

   52 two_reg_jmp_inst: BGT two_regs . COMMA adress_operand

    COMMA  shift, and go to state 102


State 66

   35 one_reg_inst: PUSH one_reg .

    $default  reduce using rule 35 (one_reg_inst)


State 67

   36 one_reg_inst: POP one_reg .

    $default  reduce using rule 36 (one_reg_inst)


State 68

   38 two_reg_inst: XCHG two_regs .

    $default  reduce using rule 38 (two_reg_inst)


State 69

   39 two_reg_inst: ADD two_regs .

    $default  reduce using rule 39 (two_reg_inst)


State 70

   40 two_reg_inst: SUB two_regs .

    $default  reduce using rule 40 (two_reg_inst)


State 71

   41 two_reg_inst: MUL two_regs .

    $default  reduce using rule 41 (two_reg_inst)


State 72

   42 two_reg_inst: DIV two_regs .

    $default  reduce using rule 42 (two_reg_inst)


State 73

   37 one_reg_inst: NOT one_reg .

    $default  reduce using rule 37 (one_reg_inst)


State 74

   43 two_reg_inst: AND two_regs .

    $default  reduce using rule 43 (two_reg_inst)


State 75

   44 two_reg_inst: OR two_regs .

    $default  reduce using rule 44 (two_reg_inst)


State 76

   45 two_reg_inst: XOR two_regs .

    $default  reduce using rule 45 (two_reg_inst)


State 77

   46 two_reg_inst: SHL two_regs .

    $default  reduce using rule 46 (two_reg_inst)


State 78

   47 two_reg_inst: SHR two_regs .

    $default  reduce using rule 47 (two_reg_inst)


State 79

   55 ld_data_operand: DOLLAR . literal COMMA REG
   56                | DOLLAR . symbol COMMA REG

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    literal  go to state 103
    symbol   go to state 104


State 80

   60 ld_data_operand: LEFTBRACKET . one_reg RIGHTBRACKET COMMA REG
   61                | LEFTBRACKET . one_reg PLUS literal RIGHTBRACKET COMMA REG

    REG  shift, and go to state 61

    one_reg  go to state 105


State 81

   59 ld_data_operand: one_reg . COMMA REG

    COMMA  shift, and go to state 106


State 82

   22 instruction: LD ld_data_operand .

    $default  reduce using rule 22 (instruction)


State 83

   57 ld_data_operand: literal . COMMA REG

    COMMA  shift, and go to state 107


State 84

   58 ld_data_operand: symbol . COMMA REG

    COMMA  shift, and go to state 108


State 85

   23 instruction: ST one_reg . COMMA st_data_operand

    COMMA  shift, and go to state 109


State 86

   26 csr_reg: STATUS .

    $default  reduce using rule 26 (csr_reg)


State 87

   27 csr_reg: HANDLER .

    $default  reduce using rule 27 (csr_reg)


State 88

   28 csr_reg: CAUSE .

    $default  reduce using rule 28 (csr_reg)


State 89

   24 instruction: CSRRD csr_reg . COMMA one_reg

    COMMA  shift, and go to state 110


State 90

   25 instruction: CSRWR one_reg . COMMA csr_reg

    COMMA  shift, and go to state 111


State 91

    8 label: IDENTIFIER COLON .

    $default  reduce using rule 8 (label)


State 92

    0 $accept: program $end .

    $default  accept


State 93

    2 program: program line .

    $default  reduce using rule 2 (program)


State 94

    4 line: label end_of_line .

    $default  reduce using rule 4 (line)


State 95

    3 line: label operation . end_of_line

    EOL  shift, and go to state 33

    end_of_line  go to state 112


State 96

    5 line: operation end_of_line .

    $default  reduce using rule 5 (line)


State 97

   69 symbol_list: symbol_list COMMA . symbol

    IDENTIFIER  shift, and go to state 47

    symbol  go to state 113


State 98

   72 symbol_literal_list: symbol_literal_list COMMA . symbol
   73                    | symbol_literal_list COMMA . literal

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    literal  go to state 114
    symbol   go to state 115


State 99

   49 two_regs: one_reg COMMA . REG

    REG  shift, and go to state 116


State 100

   50 two_reg_jmp_inst: BEQ two_regs COMMA . adress_operand

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    adress_operand  go to state 117
    literal         go to state 58
    symbol          go to state 59


State 101

   51 two_reg_jmp_inst: BNE two_regs COMMA . adress_operand

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    adress_operand  go to state 118
    literal         go to state 58
    symbol          go to state 59


State 102

   52 two_reg_jmp_inst: BGT two_regs COMMA . adress_operand

    NUMBER      shift, and go to state 52
    IDENTIFIER  shift, and go to state 47

    adress_operand  go to state 119
    literal         go to state 58
    symbol          go to state 59


State 103

   55 ld_data_operand: DOLLAR literal . COMMA REG

    COMMA  shift, and go to state 120


State 104

   56 ld_data_operand: DOLLAR symbol . COMMA REG

    COMMA  shift, and go to state 121


State 105

   60 ld_data_operand: LEFTBRACKET one_reg . RIGHTBRACKET COMMA REG
   61                | LEFTBRACKET one_reg . PLUS literal RIGHTBRACKET COMMA REG

    RIGHTBRACKET  shift, and go to state 122
    PLUS          shift, and go to state 123


State 106

   59 ld_data_operand: one_reg COMMA . REG

    REG  shift, and go to state 124


State 107

   57 ld_data_operand: literal COMMA . REG

    REG  shift, and go to state 125


State 108

   58 ld_data_operand: symbol COMMA . REG

    REG  shift, and go to state 126


State 109

   23 instruction: ST one_reg COMMA . st_data_operand

    LEFTBRACKET  shift, and go to state 127
    NUMBER       shift, and go to state 52
    IDENTIFIER   shift, and go to state 47

    st_data_operand  go to state 128
    literal          go to state 129
    symbol           go to state 130


State 110

   24 instruction: CSRRD csr_reg COMMA . one_reg

    REG  shift, and go to state 61

    one_reg  go to state 131


State 111

   25 instruction: CSRWR one_reg COMMA . csr_reg

    STATUS   shift, and go to state 86
    HANDLER  shift, and go to state 87
    CAUSE    shift, and go to state 88

    csr_reg  go to state 132


State 112

    3 line: label operation end_of_line .

    $default  reduce using rule 3 (line)


State 113

   69 symbol_list: symbol_list COMMA symbol .

    $default  reduce using rule 69 (symbol_list)


State 114

   73 symbol_literal_list: symbol_literal_list COMMA literal .

    $default  reduce using rule 73 (symbol_literal_list)


State 115

   72 symbol_literal_list: symbol_literal_list COMMA symbol .

    $default  reduce using rule 72 (symbol_literal_list)


State 116

   49 two_regs: one_reg COMMA REG .

    $default  reduce using rule 49 (two_regs)


State 117

   50 two_reg_jmp_inst: BEQ two_regs COMMA adress_operand .

    $default  reduce using rule 50 (two_reg_jmp_inst)


State 118

   51 two_reg_jmp_inst: BNE two_regs COMMA adress_operand .

    $default  reduce using rule 51 (two_reg_jmp_inst)


State 119

   52 two_reg_jmp_inst: BGT two_regs COMMA adress_operand .

    $default  reduce using rule 52 (two_reg_jmp_inst)


State 120

   55 ld_data_operand: DOLLAR literal COMMA . REG

    REG  shift, and go to state 133


State 121

   56 ld_data_operand: DOLLAR symbol COMMA . REG

    REG  shift, and go to state 134


State 122

   60 ld_data_operand: LEFTBRACKET one_reg RIGHTBRACKET . COMMA REG

    COMMA  shift, and go to state 135


State 123

   61 ld_data_operand: LEFTBRACKET one_reg PLUS . literal RIGHTBRACKET COMMA REG

    NUMBER  shift, and go to state 52

    literal  go to state 136


State 124

   59 ld_data_operand: one_reg COMMA REG .

    $default  reduce using rule 59 (ld_data_operand)


State 125

   57 ld_data_operand: literal COMMA REG .

    $default  reduce using rule 57 (ld_data_operand)


State 126

   58 ld_data_operand: symbol COMMA REG .

    $default  reduce using rule 58 (ld_data_operand)


State 127

   64 st_data_operand: LEFTBRACKET . REG RIGHTBRACKET
   65                | LEFTBRACKET . REG PLUS literal RIGHTBRACKET

    REG  shift, and go to state 137


State 128

   23 instruction: ST one_reg COMMA st_data_operand .

    $default  reduce using rule 23 (instruction)


State 129

   62 st_data_operand: literal .

    $default  reduce using rule 62 (st_data_operand)


State 130

   63 st_data_operand: symbol .

    $default  reduce using rule 63 (st_data_operand)


State 131

   24 instruction: CSRRD csr_reg COMMA one_reg .

    $default  reduce using rule 24 (instruction)


State 132

   25 instruction: CSRWR one_reg COMMA csr_reg .

    $default  reduce using rule 25 (instruction)


State 133

   55 ld_data_operand: DOLLAR literal COMMA REG .

    $default  reduce using rule 55 (ld_data_operand)


State 134

   56 ld_data_operand: DOLLAR symbol COMMA REG .

    $default  reduce using rule 56 (ld_data_operand)


State 135

   60 ld_data_operand: LEFTBRACKET one_reg RIGHTBRACKET COMMA . REG

    REG  shift, and go to state 138


State 136

   61 ld_data_operand: LEFTBRACKET one_reg PLUS literal . RIGHTBRACKET COMMA REG

    RIGHTBRACKET  shift, and go to state 139


State 137

   64 st_data_operand: LEFTBRACKET REG . RIGHTBRACKET
   65                | LEFTBRACKET REG . PLUS literal RIGHTBRACKET

    RIGHTBRACKET  shift, and go to state 140
    PLUS          shift, and go to state 141


State 138

   60 ld_data_operand: LEFTBRACKET one_reg RIGHTBRACKET COMMA REG .

    $default  reduce using rule 60 (ld_data_operand)


State 139

   61 ld_data_operand: LEFTBRACKET one_reg PLUS literal RIGHTBRACKET . COMMA REG

    COMMA  shift, and go to state 142


State 140

   64 st_data_operand: LEFTBRACKET REG RIGHTBRACKET .

    $default  reduce using rule 64 (st_data_operand)


State 141

   65 st_data_operand: LEFTBRACKET REG PLUS . literal RIGHTBRACKET

    NUMBER  shift, and go to state 52

    literal  go to state 143


State 142

   61 ld_data_operand: LEFTBRACKET one_reg PLUS literal RIGHTBRACKET COMMA . REG

    REG  shift, and go to state 144


State 143

   65 st_data_operand: LEFTBRACKET REG PLUS literal . RIGHTBRACKET

    RIGHTBRACKET  shift, and go to state 145


State 144

   61 ld_data_operand: LEFTBRACKET one_reg PLUS literal RIGHTBRACKET COMMA REG .

    $default  reduce using rule 61 (ld_data_operand)


State 145

   65 st_data_operand: LEFTBRACKET REG PLUS literal RIGHTBRACKET .

    $default  reduce using rule 65 (st_data_operand)
